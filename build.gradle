plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    // ide
    id 'idea'
    id 'eclipse'
    // test coverage
    id 'jacoco'
    // quality
    id 'org.sonarqube' version '2.6.2'
    // docker build & push
    id 'maven-publish'
    id 'com.palantir.docker' version '0.19.2'
    // integration tests
    id 'org.unbroken-dome.test-sets' version '1.4.2'
    // xenon --version reads version from this file
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

description = 'Perform files and jobs operations with Xenon library from command line'
version = '2.2.0'
group = 'nl.esciencecenter.xenon.cli'
mainClassName = 'nl.esciencecenter.xenon.cli.Main'
applicationName = 'xenon'
def javaVersion = JavaVersion.VERSION_1_8
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://dl.bintray.com/palantir/releases' // docker-compose-rule is published on bintray, not jcenter
    }
    maven { url 'https://jitpack.io' }
}

testSets {
    integrationTest
}

ext.xenonLibVersion = '2.4.1'

dependencies {
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    compile 'com.google.code.gson:gson:2.8.2'
    compile 'net.sourceforge.argparse4j:argparse4j:0.8.1'
    compile("nl.esciencecenter.xenon:xenon:${xenonLibVersion}") {
        exclude group: 'org.slf4j', module:'slf4j-log4j12'
    }
    compile 'org.slf4j:slf4j-api:1.7.25'

    testCompile 'junit:junit:4.12'
    testCompile 'com.github.stefanbirkner:system-rules:1.17.1'
    testCompile 'org.mockito:mockito-core:2.15.0'

    integrationTestCompile 'org.apache.hadoop:hadoop-client:3.0.0'
    integrationTestCompile 'com.github.geowarin:docker-junit-rule:1.2.0'
    integrationTestCompile 'com.palantir.docker.compose:docker-compose-rule-junit4:0.33.0'
}

docker {
    name 'nlesc/xenon-cli'
    dependsOn tasks.installShadowDist
    files tasks.installShadowDist.outputs
}
dockerfileZip.enabled = false

// use shadow dists everywhere
distZip.enabled = false
distTar.enabled = false
assemble.dependsOn shadowDistTar
assemble.dependsOn shadowDistZip

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}

jacocoTestReport {
    description 'Generate coverage report of unit tests'
    group 'Code coverage reporting'
    reports {
        xml.enabled true
    }
}
jacocoTestReport.dependsOn test

check.dependsOn integrationTest
integrationTest.mustRunAfter test

task jacocoIntegrationTestReport(type: JacocoReport) {
    description 'Generate coverage report of integration tests'
    group 'Code coverage reporting'
    executionData integrationTest
    sourceSets sourceSets.main
}

task jacocoMerge(type: JacocoMerge) {
    executionData test, integrationTest
}

task jacocoIntegrationAndUnitTestReport(type: JacocoReport) {
    description 'Generate coverage report of integration and unit tests'
    group 'Code coverage reporting'
    dependsOn jacocoMerge
    executionData jacocoMerge.destinationFile
    sourceSets sourceSets.main
}

// See progress of tests
tasks.withType(Test) {
    // only verbose logging on when CI environment var is set, because on CI we can't look at html test reports
    if (System.getenv("CI")) {
        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
            showStackTraces true
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarqube.com'
        property 'sonar.organization', "nlesc"
        property 'sonar.language', 'java'
        property 'sonar.links.homepage', 'https://github.com/NLeSC/xenon-cli'
        properties["sonar.tests"] += sourceSets.integrationTest.allSource.srcDirs
        property 'sonar.jacoco.reportPaths', [jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData]
    }
}
project.tasks["sonarqube"].dependsOn "check"

buildConfig {
    appName = project.applicationName
    buildConfigField 'String', 'XENON_LIB_VERSION', "${xenonLibVersion}"
}

task enforceVersion << {
    def foundVersion = JavaVersion.current();
    if (foundVersion != javaVersion)
        throw new IllegalStateException("Wrong Java version; required is "
            + javaVersion + ", but found " + foundVersion);
}

compileJava.dependsOn(enforceVersion);
