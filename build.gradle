plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    // ide
    id 'idea'
    id 'eclipse'
    // test coverage
    id 'jacoco'
    // quality
    id 'org.sonarqube' version '2.7'
    // docker build & push
    id 'maven-publish'
    id 'com.palantir.docker' version '0.21.0'
    // integration tests
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    // xenon --version reads version from this file
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    id 'org.mikeneck.graalvm-native-image' version 'v0.8.0'
}

description = 'Perform files and jobs operations with Xenon library from command line'
version = '3.0.5'
group = 'nl.esciencecenter.xenon.cli'
mainClassName = 'nl.esciencecenter.xenon.cli.Main'
applicationName = 'xenon'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

testSets {
    integrationTest
}

ext.xenonLibVersion = '3.1.0'
ext.xenonCloudLibVersion = '3.0.2'

dependencies {
//    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    implementation 'com.google.code.gson:gson:2.5'
    implementation 'net.sourceforge.argparse4j:argparse4j:0.8.1'

    implementation group: 'nl.esciencecenter.xenon', name: 'xenon', version: xenonLibVersion
    // implementation group: 'nl.esciencecenter.xenon', name: 'xenon-all', version: xenonLibVersion
    implementation group: 'nl.esciencecenter.xenon.adaptors', name: 'xenon-adaptors-cloud', version: xenonCloudLibVersion
//    implementation group: 'nl.esciencecenter.xenon.adaptors', name: 'xenon-adaptors-hadoop', version: xenonLibVersion
//    implementation group: 'nl.esciencecenter.xenon.adaptors', name: 'xenon-adaptors-grid', version: xenonLibVersion

    implementation 'org.slf4j:slf4j-api:1.7.26'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.github.stefanbirkner:system-rules:1.18.0'
    testImplementation 'org.mockito:mockito-core:2.25.1'

//    integrationTestCompile 'org.apache.hadoop:hadoop-client:3.0.0'
    integrationTestImplementation 'org.testcontainers:testcontainers:1.10.7'
}

docker {
    name 'xenonmiddleware/xenon-cli'
    dependsOn tasks.installShadowDist
    files tasks.installShadowDist.outputs
}
dockerfileZip.enabled = false

// use shadow dists everywhere
distZip.enabled = false
distTar.enabled = false
assemble.dependsOn shadowDistTar
assemble.dependsOn shadowDistZip

jacocoTestReport {
    description 'Generate coverage report of unit tests'
    group 'Code coverage reporting'
    reports {
        xml.enabled true
    }
}
jacocoTestReport.dependsOn test

check.dependsOn integrationTest
integrationTest.mustRunAfter test

// task jacocoIntegrationTestReport(type: JacocoReport) {
//     description 'Generate coverage report of integration tests'
//     group 'Code coverage reporting'
//     executionData integrationTest
//     sourceSets sourceSets.main
// }

task jacocoMerge(type: JacocoMerge) {
    executionData test, integrationTest
}

task jacocoIntegrationAndUnitTestReport(type: JacocoReport) {
    description 'Generate coverage report of integration and unit tests'
    group 'Code coverage reporting'
    dependsOn jacocoMerge
    executionData jacocoMerge.destinationFile
    sourceSets sourceSets.main
}

// See progress of tests
tasks.withType(Test) {
    // only verbose logging on when CI environment var is set, because on CI we can't look at html test reports
    if (System.getenv("CI")) {
        testLogging {
            events 'started', 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
            showStackTraces true
        }
    }
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'xenon-middleware_xenon-cli'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', "xenon-middleware"
        property 'sonar.language', 'java'
        property 'sonar.links.homepage', 'https://github.com/xenon-middleware/xenon-cli'
        properties["sonar.tests"] += sourceSets.integrationTest.allSource.srcDirs
        property 'sonar.jacoco.reportPaths', [jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData]
    }
}
project.tasks["sonarqube"].dependsOn "check"

buildConfig {
    appName = project.applicationName
    buildConfigField 'String', 'XENON_LIB_VERSION', "${xenonLibVersion}"
    buildConfigField 'String', 'XENON_CLOUD_LIB_VERSION', "${xenonCloudLibVersion}"
}

shadowJar {
    mergeServiceFiles()
}

nativeImage {
    graalVmHome = "/home/verhoes/downloads/graalvm-ce-java11-20.3.0"
    mainClass ="nl.esciencecenter.xenon.cli.Main"
    executableName = "xenon"
    arguments(
        '--no-fallback',
        '--allow-incomplete-classpath',
        '-H:IncludeResourceBundles=net.sourceforge.argparse4j.internal.ArgumentParserImpl',
        '--initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder',
        '--initialize-at-build-time=org.slf4j.LoggerFactory',
        '--initialize-at-build-time=ch.qos.logback.core.ContextBase,ch.qos.logback.classic.PatternLayout,org.slf4j.MDC',
        '--initialize-at-build-time=ch.qos.logback.classic.Logger,ch.qos.logback.classic.Level,ch.qos.logback.core.status.InfoStatus,ch.qos.logback.core.spi.AppenderAttachableImpl,ch.qos.logback.core.status.StatusBase',
        '--initialize-at-build-time=ch.qos.logback.classic.Level,ch.qos.logback.core.status.InfoStatus,ch.qos.logback.core.spi.AppenderAttachableImpl,ch.qos.logback.core.status.StatusBase',
        '--initialize-at-build-time=org.apache.sshd.client.config.hosts.HostPatternsHolder,org.apache.sshd.client.SshClient,org.apache.sshd.client.subsystem.sftp.fs.SftpFileSystemProvider,org.apache.sshd.common.util.closeable.IoBaseCloseable,org.apache.sshd.common.session.Session,org.apache.sshd.common.Closeable,org.apache.sshd.common.BaseBuilder,org.apache.sshd.client.subsystem.sftp.SftpClient,org.apache.sshd.client.ClientBuilder,org.apache.sshd.common.util.closeable.AbstractInnerCloseable,org.apache.sshd.common.config.keys.FilePasswordProvider,ch.qos.logback.core.CoreConstants,org.apache.sshd.common.PropertyResolverUtils,org.apache.sshd.client.keyverifier.AcceptAllServerKeyVerifier,org.apache.sshd.common.random.JceRandomFactory,org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver,org.apache.sshd.common.util.GenericUtils,org.apache.sshd.client.subsystem.sftp.SftpVersionSelector,org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver,org.apache.sshd.common.util.io.ModifiableFileWatcher,org.apache.sshd.common.util.io.IoUtils,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.util.closeable.AbstractCloseable,org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.util.ReflectionUtils,org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.NamedResource,org.apache.sshd.common.kex.AbstractKexFactoryManager',
        '--initialize-at-build-time=org.apache.sshd.common.file.nativefs.NativeFileSystemFactory,org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory,org.apache.sshd.common.util.EventListenerUtils,org.apache.sshd.client.auth.password.UserAuthPasswordFactory,org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler,org.apache.sshd.client.session.ClientUserAuthServiceFactory,org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder,org.apache.sshd.common.keyprovider.AbstractKeyPairProvider,org.apache.sshd.client.config.keys.ClientIdentity,org.apache.sshd.client.auth.AuthenticationIdentitiesProvider,org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory$1,org.apache.sshd.common.io.DefaultIoServiceFactoryFactory,org.apache.sshd.client.config.keys.ClientIdentitiesWatcher,org.apache.sshd.common.util.NumberUtils,org.apache.sshd.client.session.ClientConnectionServiceFactory$1,org.apache.sshd.common.SyspropsMapWrapper,org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher,org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher,org.apache.sshd.common.session.ConnectionServiceRequestHandler,org.apache.sshd.common.config.keys.PublicKeyEntry,org.apache.sshd.client.session.ClientConnectionServiceFactory,org.apache.sshd.common.io.DefaultIoServiceFactoryFactory$LazyDefaultIoServiceFactoryFactoryHolder,org.apache.sshd.common.config.keys.PublicKeyEntry$LazyDefaultKeysFolderHolder,org.apache.sshd.client.config.hosts.HostConfigEntry,org.apache.sshd.common.session.helpers.AbstractConnectionServiceRequestHandler,org.apache.sshd.client.global.OpenSshHostKeysHandler,org.apache.sshd.server.forward.ForwardedTcpipFactory,org.apache.sshd.common.keyprovider.KeyPairProvider,org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory',
        '--initialize-at-build-time=org.apache.mina.core.polling.AbstractPollingIoProcessor,org.apache.mina.transport.socket.nio.NioProcessor,org.apache.mina.core.service.SimpleIoProcessorPool,org.apache.sshd.server.forward.RejectAllForwardingFilter,org.apache.sshd.common.forward.DefaultForwarderFactory$1,org.apache.sshd.common.forward.DefaultForwarderFactory,org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler',
        // '--initialize-at-build-time=',
    )
}

// generateNativeImageConfig {
//   enabled = true
//   byRunningApplicationWithoutArguments()
// }
